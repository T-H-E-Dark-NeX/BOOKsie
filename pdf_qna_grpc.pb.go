// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: pdf_qna.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmbeddingService_GenerateEmbedding_FullMethodName = "/pdf_qna.EmbeddingService/GenerateEmbedding"
)

// EmbeddingServiceClient is the client API for EmbeddingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbeddingServiceClient interface {
	// Generates an embedding for the given text.
	GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error)
}

type embeddingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingServiceClient(cc grpc.ClientConnInterface) EmbeddingServiceClient {
	return &embeddingServiceClient{cc}
}

func (c *embeddingServiceClient) GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error) {
	out := new(GenerateEmbeddingResponse)
	err := c.cc.Invoke(ctx, EmbeddingService_GenerateEmbedding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddingServiceServer is the server API for EmbeddingService service.
// All implementations must embed UnimplementedEmbeddingServiceServer
// for forward compatibility
type EmbeddingServiceServer interface {
	// Generates an embedding for the given text.
	GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error)
	mustEmbedUnimplementedEmbeddingServiceServer()
}

// UnimplementedEmbeddingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmbeddingServiceServer struct {
}

func (UnimplementedEmbeddingServiceServer) GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmbedding not implemented")
}
func (UnimplementedEmbeddingServiceServer) mustEmbedUnimplementedEmbeddingServiceServer() {}

// UnsafeEmbeddingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingServiceServer will
// result in compilation errors.
type UnsafeEmbeddingServiceServer interface {
	mustEmbedUnimplementedEmbeddingServiceServer()
}

func RegisterEmbeddingServiceServer(s grpc.ServiceRegistrar, srv EmbeddingServiceServer) {
	s.RegisterService(&EmbeddingService_ServiceDesc, srv)
}

func _EmbeddingService_GenerateEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServiceServer).GenerateEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbeddingService_GenerateEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServiceServer).GenerateEmbedding(ctx, req.(*GenerateEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbeddingService_ServiceDesc is the grpc.ServiceDesc for EmbeddingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbeddingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdf_qna.EmbeddingService",
	HandlerType: (*EmbeddingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateEmbedding",
			Handler:    _EmbeddingService_GenerateEmbedding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdf_qna.proto",
}

const (
	QnAService_AnswerQuestion_FullMethodName    = "/pdf_qna.QnAService/AnswerQuestion"
	QnAService_UploadPDF_FullMethodName         = "/pdf_qna.QnAService/UploadPDF"
	QnAService_ListProcessedPDFs_FullMethodName = "/pdf_qna.QnAService/ListProcessedPDFs"
)

// QnAServiceClient is the client API for QnAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QnAServiceClient interface {
	// Answers a question based on the provided context (e.g., relevant PDF chunks).
	AnswerQuestion(ctx context.Context, in *AnswerQuestionRequest, opts ...grpc.CallOption) (*AnswerQuestionResponse, error)
	// Uploads a PDF for processing.
	UploadPDF(ctx context.Context, in *UploadPDFRequest, opts ...grpc.CallOption) (*UploadPDFResponse, error)
	// Lists all processed PDFs.
	ListProcessedPDFs(ctx context.Context, in *ListProcessedPDFsRequest, opts ...grpc.CallOption) (*ListProcessedPDFsResponse, error)
}

type qnAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQnAServiceClient(cc grpc.ClientConnInterface) QnAServiceClient {
	return &qnAServiceClient{cc}
}

func (c *qnAServiceClient) AnswerQuestion(ctx context.Context, in *AnswerQuestionRequest, opts ...grpc.CallOption) (*AnswerQuestionResponse, error) {
	out := new(AnswerQuestionResponse)
	err := c.cc.Invoke(ctx, QnAService_AnswerQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qnAServiceClient) UploadPDF(ctx context.Context, in *UploadPDFRequest, opts ...grpc.CallOption) (*UploadPDFResponse, error) {
	out := new(UploadPDFResponse)
	err := c.cc.Invoke(ctx, QnAService_UploadPDF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qnAServiceClient) ListProcessedPDFs(ctx context.Context, in *ListProcessedPDFsRequest, opts ...grpc.CallOption) (*ListProcessedPDFsResponse, error) {
	out := new(ListProcessedPDFsResponse)
	err := c.cc.Invoke(ctx, QnAService_ListProcessedPDFs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QnAServiceServer is the server API for QnAService service.
// All implementations must embed UnimplementedQnAServiceServer
// for forward compatibility
type QnAServiceServer interface {
	// Answers a question based on the provided context (e.g., relevant PDF chunks).
	AnswerQuestion(context.Context, *AnswerQuestionRequest) (*AnswerQuestionResponse, error)
	// Uploads a PDF for processing.
	UploadPDF(context.Context, *UploadPDFRequest) (*UploadPDFResponse, error)
	// Lists all processed PDFs.
	ListProcessedPDFs(context.Context, *ListProcessedPDFsRequest) (*ListProcessedPDFsResponse, error)
	mustEmbedUnimplementedQnAServiceServer()
}

// UnimplementedQnAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQnAServiceServer struct {
}

func (UnimplementedQnAServiceServer) AnswerQuestion(context.Context, *AnswerQuestionRequest) (*AnswerQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuestion not implemented")
}
func (UnimplementedQnAServiceServer) UploadPDF(context.Context, *UploadPDFRequest) (*UploadPDFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPDF not implemented")
}
func (UnimplementedQnAServiceServer) ListProcessedPDFs(context.Context, *ListProcessedPDFsRequest) (*ListProcessedPDFsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessedPDFs not implemented")
}
func (UnimplementedQnAServiceServer) mustEmbedUnimplementedQnAServiceServer() {}

// UnsafeQnAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QnAServiceServer will
// result in compilation errors.
type UnsafeQnAServiceServer interface {
	mustEmbedUnimplementedQnAServiceServer()
}

func RegisterQnAServiceServer(s grpc.ServiceRegistrar, srv QnAServiceServer) {
	s.RegisterService(&QnAService_ServiceDesc, srv)
}

func _QnAService_AnswerQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QnAServiceServer).AnswerQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QnAService_AnswerQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QnAServiceServer).AnswerQuestion(ctx, req.(*AnswerQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QnAService_UploadPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPDFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QnAServiceServer).UploadPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QnAService_UploadPDF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QnAServiceServer).UploadPDF(ctx, req.(*UploadPDFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QnAService_ListProcessedPDFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessedPDFsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QnAServiceServer).ListProcessedPDFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QnAService_ListProcessedPDFs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QnAServiceServer).ListProcessedPDFs(ctx, req.(*ListProcessedPDFsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QnAService_ServiceDesc is the grpc.ServiceDesc for QnAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QnAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdf_qna.QnAService",
	HandlerType: (*QnAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnswerQuestion",
			Handler:    _QnAService_AnswerQuestion_Handler,
		},
		{
			MethodName: "UploadPDF",
			Handler:    _QnAService_UploadPDF_Handler,
		},
		{
			MethodName: "ListProcessedPDFs",
			Handler:    _QnAService_ListProcessedPDFs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdf_qna.proto",
}
