// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.2
// source: pdf_qna.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnswerMode int32

const (
	AnswerMode_CONTEXT_ONLY              AnswerMode = 0 // Default: Answer strictly based on provided context
	AnswerMode_GENERAL_KNOWLEDGE_ALLOWED AnswerMode = 1 // Allow LLM to use its general knowledge
)

// Enum value maps for AnswerMode.
var (
	AnswerMode_name = map[int32]string{
		0: "CONTEXT_ONLY",
		1: "GENERAL_KNOWLEDGE_ALLOWED",
	}
	AnswerMode_value = map[string]int32{
		"CONTEXT_ONLY":              0,
		"GENERAL_KNOWLEDGE_ALLOWED": 1,
	}
)

func (x AnswerMode) Enum() *AnswerMode {
	p := new(AnswerMode)
	*p = x
	return p
}

func (x AnswerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnswerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pdf_qna_proto_enumTypes[0].Descriptor()
}

func (AnswerMode) Type() protoreflect.EnumType {
	return &file_pdf_qna_proto_enumTypes[0]
}

func (x AnswerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnswerMode.Descriptor instead.
func (AnswerMode) EnumDescriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{0}
}

// The request message containing the text to embed.
type GenerateEmbeddingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *GenerateEmbeddingRequest) Reset() {
	*x = GenerateEmbeddingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateEmbeddingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateEmbeddingRequest) ProtoMessage() {}

func (x *GenerateEmbeddingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateEmbeddingRequest.ProtoReflect.Descriptor instead.
func (*GenerateEmbeddingRequest) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateEmbeddingRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// The response message containing the generated embedding.
type GenerateEmbeddingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedding []float32 `protobuf:"fixed32,1,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
}

func (x *GenerateEmbeddingResponse) Reset() {
	*x = GenerateEmbeddingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateEmbeddingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateEmbeddingResponse) ProtoMessage() {}

func (x *GenerateEmbeddingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateEmbeddingResponse.ProtoReflect.Descriptor instead.
func (*GenerateEmbeddingResponse) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateEmbeddingResponse) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

// The request message for answering a question.
type AnswerQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question             string     `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	ContextChunks        []string   `protobuf:"bytes,2,rep,name=context_chunks,json=contextChunks,proto3" json:"context_chunks,omitempty"`                        // Chunks of text from PDFs relevant to the question
	SourceDocumentFilter string     `protobuf:"bytes,3,opt,name=source_document_filter,json=sourceDocumentFilter,proto3" json:"source_document_filter,omitempty"` // Optional: filter answers by a specific document
	AnswerMode           AnswerMode `protobuf:"varint,4,opt,name=answer_mode,json=answerMode,proto3,enum=pdf_qna.AnswerMode" json:"answer_mode,omitempty"`        // New field to control answer generation mode
	PdfId                string     `protobuf:"bytes,5,opt,name=pdf_id,json=pdfId,proto3" json:"pdf_id,omitempty"`                                                // Optional: ID of the PDF to scope the question
}

func (x *AnswerQuestionRequest) Reset() {
	*x = AnswerQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerQuestionRequest) ProtoMessage() {}

func (x *AnswerQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerQuestionRequest.ProtoReflect.Descriptor instead.
func (*AnswerQuestionRequest) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{2}
}

func (x *AnswerQuestionRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *AnswerQuestionRequest) GetContextChunks() []string {
	if x != nil {
		return x.ContextChunks
	}
	return nil
}

func (x *AnswerQuestionRequest) GetSourceDocumentFilter() string {
	if x != nil {
		return x.SourceDocumentFilter
	}
	return ""
}

func (x *AnswerQuestionRequest) GetAnswerMode() AnswerMode {
	if x != nil {
		return x.AnswerMode
	}
	return AnswerMode_CONTEXT_ONLY
}

func (x *AnswerQuestionRequest) GetPdfId() string {
	if x != nil {
		return x.PdfId
	}
	return ""
}

// The response message containing the answer.
type AnswerQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer          string   `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	SourceDocuments []string `protobuf:"bytes,2,rep,name=source_documents,json=sourceDocuments,proto3" json:"source_documents,omitempty"` // Documents from which the answer was derived
}

func (x *AnswerQuestionResponse) Reset() {
	*x = AnswerQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerQuestionResponse) ProtoMessage() {}

func (x *AnswerQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerQuestionResponse.ProtoReflect.Descriptor instead.
func (*AnswerQuestionResponse) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{3}
}

func (x *AnswerQuestionResponse) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AnswerQuestionResponse) GetSourceDocuments() []string {
	if x != nil {
		return x.SourceDocuments
	}
	return nil
}

// Metadata for a processed PDF document.
type PdfDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId   string `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"` // Unique ID of the document
	FileName     string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`       // Name of the file
	Title        string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Author       string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	TotalPages   int32  `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	TotalChunks  int32  `protobuf:"varint,6,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	ProcessedAt  string `protobuf:"bytes,7,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"` // Consider using google.protobuf.Timestamp
	Status       string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`                              // e.g., "Processed", "Processing", "Failed"
	MetadataJson string `protobuf:"bytes,9,opt,name=metadata_json,json=metadataJson,proto3" json:"metadata_json,omitempty"`
}

func (x *PdfDocumentMetadata) Reset() {
	*x = PdfDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfDocumentMetadata) ProtoMessage() {}

func (x *PdfDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfDocumentMetadata.ProtoReflect.Descriptor instead.
func (*PdfDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{4}
}

func (x *PdfDocumentMetadata) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *PdfDocumentMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PdfDocumentMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PdfDocumentMetadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PdfDocumentMetadata) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PdfDocumentMetadata) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *PdfDocumentMetadata) GetProcessedAt() string {
	if x != nil {
		return x.ProcessedAt
	}
	return ""
}

func (x *PdfDocumentMetadata) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PdfDocumentMetadata) GetMetadataJson() string {
	if x != nil {
		return x.MetadataJson
	}
	return ""
}

// The request message for uploading a PDF.
type UploadPDFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	PdfContent []byte `protobuf:"bytes,2,opt,name=pdf_content,json=pdfContent,proto3" json:"pdf_content,omitempty"`
}

func (x *UploadPDFRequest) Reset() {
	*x = UploadPDFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPDFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPDFRequest) ProtoMessage() {}

func (x *UploadPDFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPDFRequest.ProtoReflect.Descriptor instead.
func (*UploadPDFRequest) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{5}
}

func (x *UploadPDFRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UploadPDFRequest) GetPdfContent() []byte {
	if x != nil {
		return x.PdfContent
	}
	return nil
}

// The response message for uploading a PDF.
type UploadPDFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"` // A unique ID assigned to the uploaded document
}

func (x *UploadPDFResponse) Reset() {
	*x = UploadPDFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPDFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPDFResponse) ProtoMessage() {}

func (x *UploadPDFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPDFResponse.ProtoReflect.Descriptor instead.
func (*UploadPDFResponse) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{6}
}

func (x *UploadPDFResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadPDFResponse) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

// The request message for listing processed PDFs.
type ListProcessedPDFsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProcessedPDFsRequest) Reset() {
	*x = ListProcessedPDFsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessedPDFsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessedPDFsRequest) ProtoMessage() {}

func (x *ListProcessedPDFsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessedPDFsRequest.ProtoReflect.Descriptor instead.
func (*ListProcessedPDFsRequest) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{7}
}

// The response message for listing processed PDFs.
type ListProcessedPDFsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*PdfDocumentMetadata `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *ListProcessedPDFsResponse) Reset() {
	*x = ListProcessedPDFsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_qna_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessedPDFsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessedPDFsResponse) ProtoMessage() {}

func (x *ListProcessedPDFsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_qna_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessedPDFsResponse.ProtoReflect.Descriptor instead.
func (*ListProcessedPDFsResponse) Descriptor() ([]byte, []int) {
	return file_pdf_qna_proto_rawDescGZIP(), []int{8}
}

func (x *ListProcessedPDFsResponse) GetDocuments() []*PdfDocumentMetadata {
	if x != nil {
		return x.Documents
	}
	return nil
}

var File_pdf_qna_proto protoreflect.FileDescriptor

var file_pdf_qna_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x64, 0x66, 0x5f, 0x71, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x64, 0x66, 0x5f, 0x71, 0x6e, 0x61, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x39, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x64,
	0x66, 0x5f, 0x71, 0x6e, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x64, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x64,
	0x66, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x16, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xa5, 0x02, 0x0a, 0x13, 0x50, 0x64, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x44, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x64, 0x66,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x64, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x44, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x44, 0x46, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x44, 0x46, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x64, 0x66, 0x5f, 0x71, 0x6e, 0x61,
	0x2e, 0x50, 0x64, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a,
	0x3d, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4c,
	0x45, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x32, 0x6e,
	0x0a, 0x10, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x70, 0x64, 0x66, 0x5f, 0x71, 0x6e,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x64, 0x66,
	0x5f, 0x71, 0x6e, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xff,
	0x01, 0x0a, 0x0a, 0x51, 0x6e, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x0e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x2e, 0x70, 0x64, 0x66, 0x5f, 0x71, 0x6e, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x64, 0x66, 0x5f, 0x71, 0x6e, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x09, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x44, 0x46, 0x12, 0x19, 0x2e,
	0x70, 0x64, 0x66, 0x5f, 0x71, 0x6e, 0x61, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x44,
	0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x64, 0x66, 0x5f, 0x71,
	0x6e, 0x61, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x44, 0x46, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x44, 0x46, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x64, 0x66, 0x5f,
	0x71, 0x6e, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x50, 0x44, 0x46, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70,
	0x64, 0x66, 0x5f, 0x71, 0x6e, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x50, 0x44, 0x46, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pdf_qna_proto_rawDescOnce sync.Once
	file_pdf_qna_proto_rawDescData = file_pdf_qna_proto_rawDesc
)

func file_pdf_qna_proto_rawDescGZIP() []byte {
	file_pdf_qna_proto_rawDescOnce.Do(func() {
		file_pdf_qna_proto_rawDescData = protoimpl.X.CompressGZIP(file_pdf_qna_proto_rawDescData)
	})
	return file_pdf_qna_proto_rawDescData
}

var file_pdf_qna_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pdf_qna_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pdf_qna_proto_goTypes = []interface{}{
	(AnswerMode)(0),                   // 0: pdf_qna.AnswerMode
	(*GenerateEmbeddingRequest)(nil),  // 1: pdf_qna.GenerateEmbeddingRequest
	(*GenerateEmbeddingResponse)(nil), // 2: pdf_qna.GenerateEmbeddingResponse
	(*AnswerQuestionRequest)(nil),     // 3: pdf_qna.AnswerQuestionRequest
	(*AnswerQuestionResponse)(nil),    // 4: pdf_qna.AnswerQuestionResponse
	(*PdfDocumentMetadata)(nil),       // 5: pdf_qna.PdfDocumentMetadata
	(*UploadPDFRequest)(nil),          // 6: pdf_qna.UploadPDFRequest
	(*UploadPDFResponse)(nil),         // 7: pdf_qna.UploadPDFResponse
	(*ListProcessedPDFsRequest)(nil),  // 8: pdf_qna.ListProcessedPDFsRequest
	(*ListProcessedPDFsResponse)(nil), // 9: pdf_qna.ListProcessedPDFsResponse
}
var file_pdf_qna_proto_depIdxs = []int32{
	0, // 0: pdf_qna.AnswerQuestionRequest.answer_mode:type_name -> pdf_qna.AnswerMode
	5, // 1: pdf_qna.ListProcessedPDFsResponse.documents:type_name -> pdf_qna.PdfDocumentMetadata
	1, // 2: pdf_qna.EmbeddingService.GenerateEmbedding:input_type -> pdf_qna.GenerateEmbeddingRequest
	3, // 3: pdf_qna.QnAService.AnswerQuestion:input_type -> pdf_qna.AnswerQuestionRequest
	6, // 4: pdf_qna.QnAService.UploadPDF:input_type -> pdf_qna.UploadPDFRequest
	8, // 5: pdf_qna.QnAService.ListProcessedPDFs:input_type -> pdf_qna.ListProcessedPDFsRequest
	2, // 6: pdf_qna.EmbeddingService.GenerateEmbedding:output_type -> pdf_qna.GenerateEmbeddingResponse
	4, // 7: pdf_qna.QnAService.AnswerQuestion:output_type -> pdf_qna.AnswerQuestionResponse
	7, // 8: pdf_qna.QnAService.UploadPDF:output_type -> pdf_qna.UploadPDFResponse
	9, // 9: pdf_qna.QnAService.ListProcessedPDFs:output_type -> pdf_qna.ListProcessedPDFsResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pdf_qna_proto_init() }
func file_pdf_qna_proto_init() {
	if File_pdf_qna_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pdf_qna_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateEmbeddingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateEmbeddingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPDFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPDFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessedPDFsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_qna_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProcessedPDFsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdf_qna_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pdf_qna_proto_goTypes,
		DependencyIndexes: file_pdf_qna_proto_depIdxs,
		EnumInfos:         file_pdf_qna_proto_enumTypes,
		MessageInfos:      file_pdf_qna_proto_msgTypes,
	}.Build()
	File_pdf_qna_proto = out.File
	file_pdf_qna_proto_rawDesc = nil
	file_pdf_qna_proto_goTypes = nil
	file_pdf_qna_proto_depIdxs = nil
}
